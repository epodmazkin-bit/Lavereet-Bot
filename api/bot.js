import { Telegraf, Markup, Scenes, session } from "telegraf";
import axios from "axios";

// ‚úÖ –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏ –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const GOOGLE_SCRIPT_URL = process.env.GOOGLE_SCRIPT_URL;
const ADMIN_ID = process.env.ADMIN_ID;

if (!BOT_TOKEN) {
  console.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel.");
}

const bot = new Telegraf(BOT_TOKEN);

// ======== –°–¶–ï–ù–´ =========
const askName = new Scenes.BaseScene("askName");
askName.enter((ctx) => ctx.reply("üëã –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"));
askName.on("text", (ctx) => {
  ctx.scene.state.name = ctx.message.text;
  ctx.scene.enter("askService");
});

const askService = new Scenes.BaseScene("askService");
askService.enter((ctx) =>
  ctx.reply(
    "üé® –ö–∞–∫–∞—è —É—Å–ª—É–≥–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
    Markup.keyboard([
      ["–ê–π–¥–µ–Ω—Ç–∏–∫–∞", "–í–µ–±-–¥–∏–∑–∞–π–Ω"],
      ["–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π", "–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—ã"],
    ])
      .oneTime()
      .resize()
  )
);
askService.on("text", (ctx) => {
  ctx.scene.state.service = ctx.message.text;
  ctx.scene.enter("askContact");
});

const askContact = new Scenes.BaseScene("askContact");
askContact.enter((ctx) => ctx.reply("üìû –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (Telegram –∏–ª–∏ e-mail):"));
askContact.on("text", async (ctx) => {
  const { name, service } = ctx.scene.state;
  const contact = ctx.message.text;

  try {
    if (GOOGLE_SCRIPT_URL) {
      await axios.post(GOOGLE_SCRIPT_URL, { name, service, contact });
    } else {
      console.warn("GOOGLE_SCRIPT_URL not set ‚Äî skipping POST to Google Script.");
    }

    await ctx.reply(`‚úÖ –°–ø–∞—Å–∏–±–æ, ${name}! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞.`);

    const message = `üì¨ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\nüë§ –ò–º—è: ${name}\nüé® –£—Å–ª—É–≥–∞: ${service}\nüì± –ö–æ–Ω—Ç–∞–∫—Ç: ${contact}`;
    if (ADMIN_ID) {
      await bot.telegram.sendMessage(ADMIN_ID, message, { parse_mode: "Markdown" });
    } else {
      console.warn("ADMIN_ID not set ‚Äî skipping admin notification.");
    }
  } catch (err) {
    console.error(err);
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.");
  }

  ctx.scene.leave();
  showMenu(ctx);
});

function showMenu(ctx) {
  return ctx.reply("‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—É–¥–∏—é –¥–∏–∑–∞–π–Ω–∞ Lavereet!", {
    parse_mode: "Markdown",
    ...Markup.inlineKeyboard([
      [Markup.button.callback("üé® –£—Å–ª—É–≥–∏", "services")],
      [Markup.button.callback("üìÅ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "portfolio")],
      [Markup.button.callback("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "order")],
      [Markup.button.callback("‚ÑπÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã", "contacts")],
    ]),
  });
}

const stage = new Scenes.Stage([askName, askService, askContact]);
bot.use(session());
bot.use(stage.middleware());

// ======== –ö–û–ú–ê–ù–î–´ =========
bot.start((ctx) => showMenu(ctx));

bot.action("services", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.editMessageText(
    "üé® –ú—ã —Å–æ–∑–¥–∞—ë–º:\n‚Ä¢ –ê–π–¥–µ–Ω—Ç–∏–∫—É\n‚Ä¢ –í–µ–±-–¥–∏–∑–∞–π–Ω\n‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç–µ–π\n‚Ä¢ –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–æ–≤",
    {
      ...Markup.inlineKeyboard([
        [Markup.button.callback("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "order")],
        [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "menu")],
      ]),
    }
  );
});

bot.action("portfolio", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.editMessageText("üìÅ –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å.", {
    ...Markup.inlineKeyboard([[Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu")]]),
  });
});

bot.action("contacts", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.editMessageText(
    "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ç—É–¥–∏–∏ Lavereet:\nTelegram: @Lavereet\nEmail: lavereet.design@gmail.com",
    {
      ...Markup.inlineKeyboard([[Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu")]]),
    }
  );
});

bot.action("order", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply("üìù –û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω—ë–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.");
  await ctx.scene.enter("askName");
});

bot.action("menu", async (ctx) => {
  await ctx.answerCbQuery();
  showMenu(ctx);
});

// ======== –≠–ö–°–ü–û–†–¢ –î–õ–Ø VERCEL =========
export default async function handler(req, res) {
  if (req.method === "POST") {
    try {
      await bot.handleUpdate(req.body);
      res.status(200).send("ok");
    } catch (err) {
      console.error(err);
      res.status(500).send("error");
    }
  } else {
    res.status(200).send("Bot endpoint working ‚úÖ");
  }
}
